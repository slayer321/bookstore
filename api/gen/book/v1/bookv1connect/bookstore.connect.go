// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: book/v1/bookstore.proto

package bookv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/slayer321/bookstore/api/gen/book/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion0_1_0

const (
	// InventoryServiceName is the fully-qualified name of the InventoryService service.
	InventoryServiceName = "book.v1.InventoryService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// InventoryServiceAddBooksProcedure is the fully-qualified name of the InventoryService's AddBooks
	// RPC.
	InventoryServiceAddBooksProcedure = "/book.v1.InventoryService/AddBooks"
	// InventoryServiceGetBooksProcedure is the fully-qualified name of the InventoryService's GetBooks
	// RPC.
	InventoryServiceGetBooksProcedure = "/book.v1.InventoryService/GetBooks"
	// InventoryServiceDeleteBooksProcedure is the fully-qualified name of the InventoryService's
	// DeleteBooks RPC.
	InventoryServiceDeleteBooksProcedure = "/book.v1.InventoryService/DeleteBooks"
	// InventoryServiceUpdateBooksProcedure is the fully-qualified name of the InventoryService's
	// UpdateBooks RPC.
	InventoryServiceUpdateBooksProcedure = "/book.v1.InventoryService/UpdateBooks"
)

// InventoryServiceClient is a client for the book.v1.InventoryService service.
type InventoryServiceClient interface {
	AddBooks(context.Context, *connect.Request[v1.Book]) (*connect.Response[v1.AddStatus], error)
	GetBooks(context.Context, *connect.Request[v1.BookID]) (*connect.Response[v1.Book], error)
	DeleteBooks(context.Context, *connect.Request[v1.BookID]) (*connect.Response[v1.AddStatus], error)
	UpdateBooks(context.Context, *connect.Request[v1.Book]) (*connect.Response[v1.AddStatus], error)
}

// NewInventoryServiceClient constructs a client for the book.v1.InventoryService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewInventoryServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) InventoryServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &inventoryServiceClient{
		addBooks: connect.NewClient[v1.Book, v1.AddStatus](
			httpClient,
			baseURL+InventoryServiceAddBooksProcedure,
			opts...,
		),
		getBooks: connect.NewClient[v1.BookID, v1.Book](
			httpClient,
			baseURL+InventoryServiceGetBooksProcedure,
			opts...,
		),
		deleteBooks: connect.NewClient[v1.BookID, v1.AddStatus](
			httpClient,
			baseURL+InventoryServiceDeleteBooksProcedure,
			opts...,
		),
		updateBooks: connect.NewClient[v1.Book, v1.AddStatus](
			httpClient,
			baseURL+InventoryServiceUpdateBooksProcedure,
			opts...,
		),
	}
}

// inventoryServiceClient implements InventoryServiceClient.
type inventoryServiceClient struct {
	addBooks    *connect.Client[v1.Book, v1.AddStatus]
	getBooks    *connect.Client[v1.BookID, v1.Book]
	deleteBooks *connect.Client[v1.BookID, v1.AddStatus]
	updateBooks *connect.Client[v1.Book, v1.AddStatus]
}

// AddBooks calls book.v1.InventoryService.AddBooks.
func (c *inventoryServiceClient) AddBooks(ctx context.Context, req *connect.Request[v1.Book]) (*connect.Response[v1.AddStatus], error) {
	return c.addBooks.CallUnary(ctx, req)
}

// GetBooks calls book.v1.InventoryService.GetBooks.
func (c *inventoryServiceClient) GetBooks(ctx context.Context, req *connect.Request[v1.BookID]) (*connect.Response[v1.Book], error) {
	return c.getBooks.CallUnary(ctx, req)
}

// DeleteBooks calls book.v1.InventoryService.DeleteBooks.
func (c *inventoryServiceClient) DeleteBooks(ctx context.Context, req *connect.Request[v1.BookID]) (*connect.Response[v1.AddStatus], error) {
	return c.deleteBooks.CallUnary(ctx, req)
}

// UpdateBooks calls book.v1.InventoryService.UpdateBooks.
func (c *inventoryServiceClient) UpdateBooks(ctx context.Context, req *connect.Request[v1.Book]) (*connect.Response[v1.AddStatus], error) {
	return c.updateBooks.CallUnary(ctx, req)
}

// InventoryServiceHandler is an implementation of the book.v1.InventoryService service.
type InventoryServiceHandler interface {
	AddBooks(context.Context, *connect.Request[v1.Book]) (*connect.Response[v1.AddStatus], error)
	GetBooks(context.Context, *connect.Request[v1.BookID]) (*connect.Response[v1.Book], error)
	DeleteBooks(context.Context, *connect.Request[v1.BookID]) (*connect.Response[v1.AddStatus], error)
	UpdateBooks(context.Context, *connect.Request[v1.Book]) (*connect.Response[v1.AddStatus], error)
}

// NewInventoryServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewInventoryServiceHandler(svc InventoryServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	inventoryServiceAddBooksHandler := connect.NewUnaryHandler(
		InventoryServiceAddBooksProcedure,
		svc.AddBooks,
		opts...,
	)
	inventoryServiceGetBooksHandler := connect.NewUnaryHandler(
		InventoryServiceGetBooksProcedure,
		svc.GetBooks,
		opts...,
	)
	inventoryServiceDeleteBooksHandler := connect.NewUnaryHandler(
		InventoryServiceDeleteBooksProcedure,
		svc.DeleteBooks,
		opts...,
	)
	inventoryServiceUpdateBooksHandler := connect.NewUnaryHandler(
		InventoryServiceUpdateBooksProcedure,
		svc.UpdateBooks,
		opts...,
	)
	return "/book.v1.InventoryService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case InventoryServiceAddBooksProcedure:
			inventoryServiceAddBooksHandler.ServeHTTP(w, r)
		case InventoryServiceGetBooksProcedure:
			inventoryServiceGetBooksHandler.ServeHTTP(w, r)
		case InventoryServiceDeleteBooksProcedure:
			inventoryServiceDeleteBooksHandler.ServeHTTP(w, r)
		case InventoryServiceUpdateBooksProcedure:
			inventoryServiceUpdateBooksHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedInventoryServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedInventoryServiceHandler struct{}

func (UnimplementedInventoryServiceHandler) AddBooks(context.Context, *connect.Request[v1.Book]) (*connect.Response[v1.AddStatus], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("book.v1.InventoryService.AddBooks is not implemented"))
}

func (UnimplementedInventoryServiceHandler) GetBooks(context.Context, *connect.Request[v1.BookID]) (*connect.Response[v1.Book], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("book.v1.InventoryService.GetBooks is not implemented"))
}

func (UnimplementedInventoryServiceHandler) DeleteBooks(context.Context, *connect.Request[v1.BookID]) (*connect.Response[v1.AddStatus], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("book.v1.InventoryService.DeleteBooks is not implemented"))
}

func (UnimplementedInventoryServiceHandler) UpdateBooks(context.Context, *connect.Request[v1.Book]) (*connect.Response[v1.AddStatus], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("book.v1.InventoryService.UpdateBooks is not implemented"))
}
